import numpy as np
import matplotlib.pyplot as plt
import sys, os
from mpl_options import *

fig, (v1, v2, Rt, S, I, ICU, D) = plt.subplots(7, len(sys.argv)-2, figsize=(2.5*(len(sys.argv)-2), 11), sharex="col", sharey="row")
#(Rt, S, I, ICU, D) = axes.T
Nobs = [0,]*(len(sys.argv)-2)
## Load data
resultname = sys.argv[1]

#descriptions= ["ICU forever", "TTI forever", "Lifting NPIs\ntoo early\n70% uptake", "Low case numbers\ninto third wave\n 70% uptake","Lifting NPIs\ntoo early\n90% uptake", "Low case numbers\ninto third wave\n 90% uptake"]
#descriptions= ["ICU forever\n(80% Uptake)", "TTI forever\n(80% Uptake)", "Keep medium\ncase numbers\n80% uptake", "Low case numbers\ninto third wave\n 80% uptake","Keep medium\ncase numbers\n90% uptake", "Low case numbers\ninto third wave\n 90% uptake", "ICU forever\n(90% Uptake)"]
#descriptions= ["ICU forever", "TTI forever", "Slowly growing\ncase numbers\ninto third wave", "Low case numbers\ninto third wave"]
#descriptions = ["ICU 70%\nUptake", "ICU 80%", "ICU 90%", "TTI 70%", "TTI 80%", "TTI 90%"]
#descriptions= ["ICU forever", "TTI forever", "Medium\ncase numbers\n early lift", "medium late lift", "late lift", "Low case numbers\nearly lift","medium late lift", "late  lift"]
#descriptions= ["Moderate\ncase numbers\n early lift", "moderately late lift", "late lift", "Low case numbers\nearly lift","moderately late lift", "late  lift"]
#descriptions= ["Low case numbers\n80% Uptake", "85% Uptake", "90% Uptake", "95% Uptake","Medium case numbers\n80% Uptake", "85% Uptake", "90% Uptake", "95% Uptake"]
#descriptions= ["Medium case numbers\n80% Uptake", "85% Uptake", "90% Uptake", "95% Uptake"]
descriptions= ["Maximal\nICU occupancy", "Long-term\nTTI control", "Lift restrictions\nearly", "Lift restrictions\nmedium late", "Lift restrictions\nlate", "Lift restrictions\nlate (capped)", "Lift restrictions\nbefore lowering numbers"]

for i, dataname in enumerate(sys.argv[2:]):
	print(dataname)
	location = os.path.abspath("data/"+dataname+"/")
	data = []
	names = []

	for file in os.listdir(location):
		if file.endswith("_age_group.data"):
			#print(os.path.join(location, file))
			names.append(file[:-15])
			data.append(np.loadtxt(os.path.join(location, file), skiprows=1).T)
	data = np.array(data)
	initials = data[:,:,0]
	data = data[:,:,1:]

	N_age_groups = len(data)
	t, H_data, Rt_data, N_data, N_obs_data, Rt_corrected = np.loadtxt(os.path.join(location, "tHRt.data"), skiprows=1).T

	# Restrict plot from beginning of March to end of 2021
	end_time_index = np.argmax((t-6)/30+1>=13)
	start_time_index = np.argmax((t-6)/30+1>=3)
	data = data[:,:,start_time_index:end_time_index]
	t = t[start_time_index:end_time_index]
	H_data = H_data[start_time_index:end_time_index]
	Rt_data = Rt_data[start_time_index:end_time_index]
	N_data = N_data[start_time_index:end_time_index]
	N_obs_data = N_obs_data[start_time_index:end_time_index]
	Rt_corrected = Rt_corrected[start_time_index:end_time_index]

	## Load parameters
	model_params = np.loadtxt(os.path.join(location, "model.params"), skiprows=1)
	age_group_params = np.loadtxt(os.path.join(location, "age_groups.params"), skiprows=1, usecols=range(1,23))[::-1]

	# Per million
	data *= 1e6/model_params[0]
	model_params[[5,6]] *= 1e6/model_params[0]
	N_data *= 1e6/model_params[0]
	N_obs_data *= 1e6/model_params[0]
	age_group_params[:,[0,1]] *= 1e6/model_params[0]
	initials *= 1e6/model_params[0]


	## Calculate age stratified case numbers
	dt = t[1]-t[0]
	daily_cases = []
	for j, data_j in enumerate(data):
		daily_cases.append(data_j[5:8].sum(axis=0)*age_group_params[j][6] + (data_j[0:5]).sum(axis=0)/age_group_params[j][0]*age_group_params[j][1])
	daily_cases   = np.array(daily_cases)

	# delay kernel
	kernel = [0, 0, 0.5, 0.3, 0.1, 0.1]
	N_obs = np.zeros(np.shape(daily_cases))
	for j in range(len(daily_cases)):
		for l,k in enumerate(kernel):
			N_obs[j] += k*np.roll(daily_cases[j], int(l/dt))
	for j in range(len(N_obs)):
		N_obs[j,:int(len(kernel)/dt)] = N_obs[j,int(len(kernel)/dt)+1]

	## R calculations: R_RKI and TTI correction
	R_RKI = N_obs_data/np.roll(N_obs_data, int(4/dt)+1)
	t = (t-6)/30+1	# beginning of 2021

	n = 0.1805#-0.33179420105486
	m = 1.6842#1.56580664022
	Rt_data_TTI = Rt_data*m + n
	if dataname[:3]=="TTI":
		n = -0.33179420105486
		m = 1.56580664022
		Rt_data = Rt_data*m + n

	# Done with vaccinations when?
	dose1_end = np.argmax(data[1,18] == 0)
	dose2_end = np.argmax(data[1,19] == 0)
	dose1_end_risk = np.argmax(data[-3,18] == 0)
	dose2_end_risk = np.argmax(data[-3,19] == 0)
	dose1_end_elderly = np.argmax(data[-1,18] == 0)
	dose2_end_elderly = np.argmax(data[-1,19] == 0)

	v1[i].set_title(descriptions[i])
	v1[i].stackplot(t, data[:,18], labels=names, ls='-', alpha=1.0)
	#v1[i].annotate(r"first dose",(.5,.8), xycoords='axes fraction')
	v2[i].stackplot(t, data[:,19], labels=names, ls='-', alpha=1.0)
	#v2[i].annotate(r"second dose",(.5,.8), xycoords='axes fraction')

	## Plot
	S[i].stackplot(t, data[:,[0,1,2,3,4]].sum(axis=1), labels=names, alpha=1.0)

	#I[i].stackplot(t, data[:,[8,9,10]].sum(axis=1), labels=names, alpha=1.0)
	I[i].stackplot(t, N_obs, labels=names, alpha=1.0)

	ICU[i].stackplot(t, data[:,[11,12,13]].sum(axis=1), alpha=1.0)
	ICU[i].axhline(model_params[5], ls='--', c='black', label="capacity")
	#ICU.annotate("capacity", (1.02, 0.86), xycoords='axes fraction')

	#R.stackplot(t, data[:,[15,16,17]].sum(axis=1), labels=names, alpha=1.0)
	#R.set_ylabel(r"$R^{tot}$")

	D[i].stackplot(t, data[:,14], labels=names, alpha=1.0)

	#Rt.violinplot(Rt_data)
	Rt[i].plot(t, Rt_data, color='black', label=r"$R_t^H$", ls=":")
	Rt[i].plot(t, Rt_corrected, color='black', label=r"$R_t^{corr}$")
	#Rt[i].plot(t, Rt_data_TTI, color='grey', label=r"$R_t^H$ (TTI)")
	Rt[i].plot(t[int(4/dt)+1:], R_RKI[int(4/dt)+1:], ls="--", color='black', label=r"$R_{RKI}$")
	#Rt.set_ylim(0.5,4.0)
	Rt[i].legend(loc='upper left', frameon=False, ncol=1)

	#Nobs[i] = I[i].twinx()

	#Nobs[i].plot(t, N_obs_data, color='#E4521B')
	#Nobs.axhline(model_params[6], ls='--', c='black', label="capacity")
	#Nobs[i].spines["right"].set_edgecolor('#E4521B')
	#Nobs[i].tick_params(axis='y', colors='#E4521B')

	#S[i].axvline(t[dose1_end], ls=":", color="tab:green")
	#I[i].axvline(t[dose1_end], ls=":", color="tab:green")
	#ICU[i].axvline(t[dose1_end], ls=":", color="tab:green")
	#D[i].axvline(t[dose1_end], ls=":", color="tab:green")
	#Rt[i].axvline(t[dose1_end], ls=":", color="tab:green")
	#Nobs[i].axvline(t[dose1_end], ls=":", color="tab:green")
	S[i].axvline(t[dose2_end], ls=":", color="tab:green")
	I[i].axvline(t[dose2_end], ls=":", color="tab:green")
	ICU[i].axvline(t[dose2_end], ls=":", color="tab:green")
	D[i].axvline(t[dose2_end], ls=":", color="tab:green")
	Rt[i].axvline(t[dose2_end], ls=":", color="tab:green")
	#Nobs[i].axvline(t[dose2_end], ls=":", color="tab:green")

	#S[i].axvline(t[dose1_end_elderly], ls=":", color="green")
	#I[i].axvline(t[dose1_end_elderly], ls=":", color="green")
	#ICU[i].axvline(t[dose1_end_elderly], ls=":", color="green")
	#D[i].axvline(t[dose1_end_elderly], ls=":", color="green")
	#Rt[i].axvline(t[dose1_end_elderly], ls=":", color="green")
	#Nobs[i].axvline(t[dose1_end_elderly], ls=":", color="green")
	S[i].axvline(t[dose2_end_elderly], ls=":", color="green")
	I[i].axvline(t[dose2_end_elderly], ls=":", color="green")
	ICU[i].axvline(t[dose2_end_elderly], ls=":", color="green")
	D[i].axvline(t[dose2_end_elderly], ls=":", color="green")
	Rt[i].axvline(t[dose2_end_elderly], ls=":", color="green")
	#Nobs[i].axvline(t[dose2_end_elderly], ls=":", color="green")

	S[i].axvline(t[dose2_end_risk], ls=":", color="green")
	I[i].axvline(t[dose2_end_risk], ls=":", color="green")
	ICU[i].axvline(t[dose2_end_risk], ls=":", color="green")
	D[i].axvline(t[dose2_end_risk], ls=":", color="green")
	Rt[i].axvline(t[dose2_end_risk], ls=":", color="green")
	#Nobs[i].axvline(t[dose2_end_risk], ls=":", color="green")


for i in range(len(sys.argv)-2):
	#if i< len(sys.argv)-3:
	#	Nobs[i].set_yticklabels([])
	#Nobs[i].set_ylim((0, I[0].get_ylim()[1]/10))
	
	D[i].set_xticks([3,6,9,12], minor=False)
	D[i].set_xticks([4,5,7,8,10,11], minor=True)
	D[i].set_xlabel("2021")

S[0].set_ylabel(r"Total susceptible")
#I[0].set_ylabel(r"$I^{tot}$")	
I[0].set_ylabel(r"Daily infected")	
ICU[0].set_ylabel(r"ICU occupancy")
D[0].set_ylabel(r"Cumulative deaths")
Rt[0].set_ylabel(r"Contacts")
#Nobs[len(sys.argv)-3].set_ylabel(r"$\hat{N}^{obs}$", color='#E4521B')
v1[0].set_ylabel("First doses\nper day per million")
v2[0].set_ylabel("Second doses\nper day per million")

plt.tight_layout(w_pad=3, h_pad=0.1)
plt.show()
fig.savefig("plot/figures/Scenarios/"+resultname+".pdf")
plt.clf()